name: Frontend Continuous Integration

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18.x'
  CACHE_NAME: 'cache-node-modules'

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    environment: Development Environment
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Perform a cache action to restore cache before dependency install
      id: cache-npm
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.CACHE_NAME }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install dependencies
      run: npm ci

    - name: Run lint
      run: npm run lint

  test:
    name: Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Perform a cache action to restore cache before dependency install
      id: cache-npm
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.CACHE_NAME }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install dependencies
      run: npm ci

    - name: Run test
      run: npm run test

  build:
    name: Build Docker Image
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Perform a cache action to restore cache before dependency install
      id: cache-npm
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.CACHE_NAME }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install npm
      run: npm ci

    - name: Generate Unique Image Tag
      id: image_tag
      run: echo "IMAGE_TAG=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Build and Run Docker Image
      run: |
        docker build --tag frontend:${{ env.IMAGE_TAG }} .